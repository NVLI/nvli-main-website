<?php

/**
 * @file
 * Contains nvli_custom.module.
 */

Use Drupal\Core\Entity;
use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * Implements hook_theme().
 */
function nvli_custom_theme($existing, $type, $theme, $path) {
  return array (
    'resource_listing_block' => array(
      'variables' => array(
        'title' => NULL,
        'count' => NULL,
        'resource_id' => NULL,
        'resource_link' => NULL,
      ),
      'path' => $path . '/templates',
      'template' => 'resource-listing-block',
    ),
  );
}

/**
 * Implements hook_mirador_metadata_alter.
 */
function nvli_custom_mirador_metadata_alter(&$entity) {
  // field_solr_docid contains the solr doc id, corresponding
  // to this entity.
  $solr_doc_id = $entity->field_solr_docid->value;
  // Proceed only if solr doc id is not empty.
  if (!empty($solr_doc_id)) {
    $metadata = \Drupal::service('custom_solr_search.search_all')->seachAll('id:' . $solr_doc_id);

   // Generate metadata array.
    $metadata = (array) $metadata['0'];
    if (!empty($metadata['title'])) {
      // Set label as metadata title.
      $entity->content['image_viewer_data']['label'] = $metadata['title'];
    }
    if (!empty($metadata['description'])) {
      // Set description as metadata description.
      $entity->content['image_viewer_data']['description'] = $metadata['description'];
    }
    if (!empty($metadata['author']['0'])) {
      // Set metadata for mirador viewer.
      $entity->content['image_viewer_data']['metadata'][] = array(
        'label' => 'author',
        'value' => $metadata['author']['0'],
      );
    }
  }
}

/**
 * Impkements hook_preprocess_node().
 */
function nvli_custom_preprocess_node(&$variables) {

  /** @var Drupal\node\Entity\Node $node */
  $node = $variables['node'];
  $view_mode = $variables['view_mode'];
  $nid = $node->id();
  $bundle = $node->bundle();

  // Check for resource entity.
  if ($bundle == 'resource') {

    // Fetch solr docid from node.
    $field_solr_docid = $node->get('field_solr_docid')->getValue();
    $solr_docid = $field_solr_docid[0]['value'];
    $query_options =  '(id:"' . $solr_docid . '")';

    // Fetch content form solr.
    $response = \Drupal::service('custom_solr_search.search_all')->seachAll('', NULL, NULL, $query_options);

    // Solr document object.
    $solr_document = $response['docs'][0];
    $image_details = \Drupal::service('nvli_custom.resource_manager')->resourceEntityThumbnailImage($node);

    if ($view_mode == 'full') {

      if (!empty($image_details)) {

        $variables['thumbnail_image_path'] = $image_details['image_path'];
        $variables['thumbnail_image_link'] = $image_details['image_link'];
      }

      $variables['solr_author'] = is_array($solr_document->author) ? implode(', ', $solr_document->author) : $solr_document->author;
      $variables['solr_description'] = $solr_document->description;
      $variables['solr_public_url'] = is_array($solr_document->url) ? implode(', ', $solr_document->url) : $solr_document->url;
      $variables['solr_published_date'] = is_array($solr_document->publishDate) ? implode(', ', $solr_document->publishDate) : $solr_document->publishDate;
      $variables['solr_publisher'] = is_array($solr_document->publisher) ? implode(', ', $solr_document->publisher) : $solr_document->publisher;
    }
  }
}

/**
 * Implements template_preprocess_views_view_field().
 */
function nvli_custom_preprocess_views_view_field(&$variables) {
  
  // Fetch respective image of resource content based on the type.
  // Override output of nid field to display default image.
  if ($variables['view']->current_display == 'related_resource_content_block' && $variables['field']->field == 'nid') {
    
    // Get current node object.
    $nid = $variables['row']->nid;
    $node = \Drupal::entityManager()
        ->getStorage('node')
        ->load($nid);
    
    // Service to fetch default image from node object.
    $thumbnail_image = \Drupal::service('nvli_custom.resource_manager')->resourceEntityThumbnailImage($node);
    
    // Variable to store the image path. It will be rendered in 
    // views-view-field--resource-content-manager--related-resource-content-block--nid.html.twig.
    $variables['default_thumb_image'] = $thumbnail_image['image_path'];
  }
}